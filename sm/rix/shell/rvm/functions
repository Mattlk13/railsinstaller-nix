#!/bin/sh

rix.rvm.rails.new()
{
  log step "rails new"
  printf "\n"
  rm -rf /tmp/example_rails_app_$$
  if   rails new /tmp/example_rails_app_$$ 2>&1 | tee $logs/rails_new | log dotted
  then log step success
  else log step failed
  fi
}

rix.rvm.gem.install()
{
  log step "gem install $1"
  printf "\n"
  if gem install $@ 2>&1 | tee $logs/gem_install_$1 | log dotted
  then
    log step success
  else
    log step failed
  fi
}

rix.rvm.install.ruby()
{
  typeset GREP_OPTIONS
  log step "install ruby - $1"
  printf "\n"
  GREP_OPTIONS="" \grep rvm_configure_env /etc/rvmrc >/dev/null ||
  {
    printf "export -a rvm_configure_env\n\
rvm_configure_env=( \
'LDFLAGS=-L/opt/sm/pkg/active/lib' \
'CFLAGS=-I/opt/sm/pkg/active/include' \
'CPATH=/opt/sm/pkg/active/include' \
)\n" >> /etc/rvmrc
  }
  # Disable autolibs for installation
  GREP_OPTIONS="" \grep rvm_autolibs_flag /etc/rvmrc >/dev/null ||
  {
    printf "export rvm_autolibs_flag=0\n" >> /etc/rvmrc
  }
  if rvm install $@ 2>&1 | tee $logs/install_ruby-$1 | log dotted
  then log step success
  else log step failed
  fi
}

rix.rvm.validate.mri.libs()
{
  find /usr/local/rvm/rubies/ -name "*.bundle" | xargs otool -L | grep -vE \
    '/usr/lib/libobjc.A.dylib|/usr/lib/libSystem.B.dylib|/opt/sm/pkg/versions/|/usr/local/rvm/rubies/.*/libruby.*dylib|/usr/local/rvm/usr/' | \
    awk '/:/ {last=$0} /^\t/ && last!="" {print last; last=""} /^\t/{print $0}' | \
    tee $logs/validate_ruby
}

rix.rvm.default.ruby()
{
  local _name
  _name=$(/usr/local/rvm/bin/rvm $1 do rvm current)
  log step "alias default ruby - $_name"
  if rvm alias create default $_name && #>/dev/null &&
    [[ -L /usr/local/rvm/environments/default ]]
  then
    log step success
  else
    log step failed
    return 1
  fi
  log step "use default ruby"
  if builtin source "/usr/local/rvm/environments/default"
  then
    log step success
  else
    log step failed
    return 1
  fi
}

rix.rvm.install()
{
  export rvm_path rvm_bin_path
  rvm_path=/usr/local/rvm
  rvm_bin_path=${rvm_path}/bin
  log step "install rvm"
  pushd $rvm_local_path >/dev/null
  if
    bash -e ./install --path $rvm_path >$logs/install_rvm 2>&1 &&
    [[ -d $rvm_path/bin ]]
  then
    log step success
    PATH=$rvm_path/bin:$PATH
    git branch | awk '$1=="*"{print $2}' > $rvm_path/RELEASE
    popd >/dev/null
  else
    log step failed
    popd >/dev/null
    return 1
  fi

  local _rvm_path
  if [[ -n "$SUDO_USER" ]]
  then
    _rvm_path=$( awk -F : '/^'"$SUDO_USER"':/ { print $6 }' < /etc/passwd )
    if [[ -d "${_rvm_path}/.rvm" ]]
    then
      _rvm_path="${_rvm_path}/.rvm"
    else
      _rvm_path=""
    fi
  fi
  if [[ -z "${_rvm_path}" && -d /usr/local/rvm.$timestamp ]]
  then
    _rvm_path=/usr/local/rvm.$timestamp
  fi
  if [[ -d ${_rvm_path}/archives/ ]]
  then
    log step "link archives to ${_rvm_path}/archives"
    rm -rf /usr/local/rvm/archives/
    ln -s ${_rvm_path}/archives/ /usr/local/rvm/archives
    log step success
  fi
}

rix.rvm.cleanup()
{
  rm -rf /usr/local/rvm/archives
  mkdir -p /usr/local/rvm/archives
  rvm cleanup all
  rvm gemset globalcache enable
  chmod -R g+w /usr/local/rvm
}
