#!/bin/sh

if ! which ldoconfig >/dev/null
then # fake ldconfig on darwin
  ldconfig()
  {
  }
fi

rix_initialize()
{
  typeset -gx logs
  typeset -gxa __rix_sm_sets __rix_sm_packages

  logs=$initial_pwd/log/$timestamp
  mkdir -p "${logs}"

  if os type is darwin
  then
    __rix_sm_sets=(
      databases gnu libraries vcs tools
    )
    __rix_sm_packages=(
      pkg-config zlib ncurses ncursesw readline
      libyaml libxml2 libxslt libffi libiconv
      openssl sqlite3 expat curl git
    )
  elif os type is linux
  then
    __rix_sm_sets=(
      databases gnu languages libraries tools vcs
    )
    __rix_sm_packages=(
      pkg-config zlib ncurses ncursesw readline
      libyaml libxml2 libxslt libffi libiconv
      openssl sqlite3 expat curl git
      gmp mpfr mpc
      m4 binutils autoconf automake make
    )
  else
    log error "RIX is designed to be built only on darwin or linux."
    exit 1
  fi
}

rix.start()
{
  typeset var
  export PATH

  trace_filter action || set -o xtrace
  log "Rails Installer uniX - preparation script - start"
  log step "backup sm/rvm" rix.old_install.backup

  rix.sm.install

  for var in "${__rix_sm_sets[@]}"
  do rix.sm.install.set $var
  done

  for var in "${__rix_sm_packages[@]}"
  do rix.sm.install.pkg $var
  done

  rix.sm.install.gcc.$(os type)

  rix.rvm.install

  rix.rvm.install.ruby 1.9.3 --64 --with-gcc=gcc-4.2
  # rix.rvm.install.ruby jruby --1.9
  # rix.rvm.install.ruby rbx --1.9

  rix.rvm.default.ruby 1.9.3
  rix.rvm.install.rails

  rix.build.installer
}

rix.echo()
{
  log "$*"
  shift
  $@
}

rix.build.installer()
{
  typeset version osx_target
  version=$( awk -F '[<>]' '/<version>/ {print $3}' $initial_pwd/installbuilder/riosx.xml )

  if os type is darwin
  then
    for osx_target in 10.6 10.7
    do
      rm -rf $installbuilder_path/output/RailsInstaller-${version}-osx-${osx_target}.app
      rix.echo "Building installer $version for OSX $osx_target." \
        $installbuilder_path/bin/builder build $initial_pwd/installbuilder/riosx.xml \
        ${installbuilder_license:+--license} ${installbuilder_license:-} \
        --setvars osx_target=${osx_target}

      log "Packaging installer $version for OSX $osx_target."
      (
        cd $installbuilder_path/output/
        tar czvf \
          RailsInstaller-${version}-osx-${osx_target}.app.tgz \
          RailsInstaller-${version}-osx-${osx_target}.app \
          2>&1 | tee $logs/package_osx_${osx_target}_installer | log dotted
        printf "\n"
      )
      scp $installbuilder_path/output/RailsInstaller-${version}-osx-${osx_target}.app.tgz rvm@rvm.io:~/shared/public/src/
      log "- https://rvm.io/src/RailsInstaller-${version}-osx-${osx_target}.app.tgz"
    done
  elif os type is linux
  then
    rm -rf $installbuilder_path/output/RailsInstaller-${version}-linux-x64.run
    rix.echo "Building installer $version for Linux." \
      $installbuilder_path/bin/builder build $initial_pwd/installbuilder/riosx.xml \
      ${installbuilder_license:+--license} ${installbuilder_license:-}

    scp $installbuilder_path/output/RailsInstaller-${version}-linux-x64.run rvm@rvm.io:~/shared/public/src/
    log "- https://rvm.io/src/RailsInstaller-${version}-linux-x64.run"
  else
    log error "Not supported platform - can not build installer."
  fi
}

rix.end()
{
  if [[ -z "${__no_clean}" ]]
  then
    log step "restore sm/rvm"     rix.old_install.restore
  else
    log "Reqested no cleaning,\n\
 - rvm installed in: /usr/local/rvm\n\
 - sm  installed in: /opt/sm"
  fi
  ldconfig /opt/sm/pkg/active/lib
  log step "cleaning old logs"  rix.clean.old.logs
  log "Rails Installer uniX - preparation script - finished"
}

rix.failed()
{
  local _status
  _status=$?
  if [[ -n "$log_step_message" ]]
  then
    log step failed
  fi
  backtrace 'rix - error '"${_status}" no_exit
  rix.end
  __sm.seppuku
}


rix.old_install.backup()
{
  if paths exist /opt/sm
  then paths move from /opt/sm to /opt/sm.$timestamp
  fi

  if paths exist /usr/local/rvm
  then paths move from /usr/local/rvm to /usr/local/rvm.$timestamp
  fi

  ldconfig /opt/sm/pkg/active/lib
}

rix.old_install.restore()
{
  paths remove /opt/sm
  if paths exist /opt/sm.$timestamp
  then paths move from /opt/sm.$timestamp to /opt/sm
  fi

  paths remove /usr/local/rvm
  if paths exist /usr/local/rvm.$timestamp
  then paths move from /usr/local/rvm.$timestamp to /usr/local/rvm
  fi
}

rix.clean.old.logs()
{
  local _log _logs_base
  _logs_base="${logs%/*}"
  for _log in $( cd ${_logs_base} ; ls -t1 | tail +6 )
  do rm -rf ${_logs_base}/${_log}
  done
}
