#!/bin/sh

rix_initialize()
{
  export logs=$initial_pwd/log/$timestamp
  mkdir -p "${logs}"
}

rix.start()
{
  local var
  trace_filter action
  log "Rails Installer uniX - preparation script - start"
  log_step "backup sm/rvm"      rix.old_install.backup

  rix.rvm.install
  for var in 1.9.2 jruby rbx
  do
    rix.rvm.install.ruby $var
  done
  rix.rvm.default.ruby 1.9.2
  rix.rvm.install.rails

  rix.sm.install
  for var in gnu languages libraries vcs
  do
    rix.sm.install.set $var
  done
  for var in zlib git sqlite3 readline openssl libiconv ncurses libyaml libffi autoconf automake make m4 libxml libxslt gcc
  do
    rix.sm.install.pkg $var
  done
}

rix.end()
{
  log_step "restore sm/rvm"     rix.old_install.restore
  log_step "cleaning old logs"  rix.clean.old.logs
  log "Rails Installer uniX - preparation script - finished"
}

rix.failed()
{
  local _status=$?
  if [[ -n "$log_step_message" ]]
  then
    log_step failed
  fi
  backtrace 'rix - error '"${_status}"
}


rix.old_install.backup()
{
  if paths exist /opt/sm
  then paths move from /opt/sm to /opt/sm.$timestamp
  fi

  if paths exist /usr/local/rvm
  then paths move from /usr/local/rvm to /usr/local/rvm.$timestamp
  fi

  ldconfig /opt/sm/pkg/active/lib
}

rix.old_install.restore()
{
  paths remove /opt/sm
  if paths exist /opt/sm.$timestamp
  then paths move from /opt/sm.$timestamp to /opt/sm
  fi

  paths remove /usr/local/rvm
  if paths exist /usr/local/rvm.$timestamp
  then paths move from /usr/local/rvm.$timestamp to /usr/local/rvm
  fi

  ldconfig /opt/sm/pkg/active/lib
}

rix.clean.old.logs()
{
  local _log _logs_base="${logs%/*}"
  for _log in $( cd ${_logs_base} ; ls -t1 | tail +6 )
  do rm -rf ${_logs_base}/${_log}
  done
}
